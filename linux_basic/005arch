#### Nginx
nginx 正则 转发规则: 参考官网
nginx rewrite： 参考官网
alias 与 root:
    alias: $alias/$url
    root:  $dir

#### keepalive

#### HA

#### mysql主从复制，读写分离
#### mysql mmm 互为主从高可用
#### mysql 多主多从 keepalived + mysql 高可用
#############################################
#### nginx
## location
优先级：从上到下编写  (location = ) > (location /xxx/yyy/zzz) > (location ^~ /xxx) > (location ~ 匹配开头, ~* 匹配结尾)
> (location /xxx) > (location /)

1. = 精准匹配: 只匹配指定的url后缀
location = / {
    ...
    }
2. /xxx 所有以 /xxx 开头
location /xxx {
   ...
   }
3. 匹配 所有以 /xxx 开头，优先级高于 前面的 2.
location ~ /xxx {
    ...
    }
4. 匹配 所有以 /xxx 开头，优先级高于 前面的 3.
location ^~ /xxx {
    ...
    }
5. 匹配 以 gis 或 png 结尾
localtion ~* \.(gis|png)$ {
    ...
    }

##location 正则表达式：
#元字符
. 除换行人员字符
\w 字母数字或下划线
\s 任意空白符
\d 数字
\b 单词开头或结束
^  开始
$  结束
#重复
* 重复0次或多次
+ 重复1次或多次
? 重复0次或一次
{n} 重复n次
{n,} 重复 >= 次
{n,m} 重复 [n,m] 次

# rewrite [url1] [url2]
last	本条规则匹配完成后继续向下匹配新的location URI规则
break	本条规则匹配完成后终止，不在匹配任何规则
redirect	返回302临时重定向
permanent	返回301永久重定向

# http 请求

##  并发计算公式：worker_precess * worker_connections/4|2
    /4 动态资源  /2 静态资源
    动态资源： proxy_pass [path];
    静态资源： root|alias [path]; autoindex off; index index.html index.htm;

nginx 反向代理 负载均衡 动静分离 高可用
##################################
正向代理：代理客户端 VPN 等
反向代理：代理服务器 proxy_pass http://ip:port;
配置文件：
   全局:
   event
   http
       location:
           ~:  包含正则表达式 区分大小写
           ~*：包含正则表达式 不区分大小写
           =： 严格匹配
负载均衡策略：
   轮询
   ip_hash( 在后端服务器不 down 下可以解决 session 问题)
   weight
   fair: 根据请求响应时间
   next upstream:
       osi 传输层：
          proxy_connect_timeout
          proxy_read_timeout
          proxy_send_timeout
       osi 表示层：
          proxy_connect_timeout
          proxy_ssl_verity on
动静分离：
  静态页面：
     expire 过期时间 当走浏览器缓存时 返回 304

################################################################################################################################################################
灰度发布 canary_release

nginx canary release design

nginx session 共享：
    redis
测试发布：weight 值
   当发布不成功时：运行部分流量
      一边流量版本回退
   当发布成功时：
      所有节点同步更新

过滤方式：
   根据规则：
      特定用户：IP 源
      cookie
   weight: 影响部分客户

数据问题：
   问题：数据更新问题，新版更新逻辑不成功要做数据回滚的，而其他客户刚好在根据旧版代码逻辑读写数据
   planB: 通过IP 设置灰度发布规则，限制数量用户访问，做好数据备份，测试验证数据有问题可手动修复
#######################################

static traffic nginx IP  Or nginx cookie
https://www.cnblogs.com/weifeng1463/p/7353710.html
################

Nginx根据Cookie实现灰度发布
############

根据Cookie查询Cookie键为version的值，如果该Cookie值为V1则转发到hilinux_01，为V2则转发到hilinux_02。Cookie值都不匹配的情况下默认走hilinux_01所对应的服务器。

两台服务器分别定义为:

hilinux_01  192.168.1.100:8080
hilinux_02  192.168.1.200:8080
用if指令实现

upstream hilinux_01 {
    server 192.168.1.100:8080 max_fails=1 fail_timeout=60;
}

upstream hilinux_02 {
    server 192.168.1.200:8080 max_fails=1 fail_timeout=60;
}

upstream default {
    server 192.168.1.100:8080 max_fails=1 fail_timeout=60;
}

server {
  listen 80;
  server_name  www.hi-linux.com;
  access_log  logs/www.hi-linux.com.log  main;

  #match cookie
  set $group "default";
    if ($http_cookie ~* "version=V1"){
        set $group hilinux_01;
    }

    if ($http_cookie ~* "version=V2"){
        set $group hilinux_02;
    }

  location / {
    proxy_pass http://$group;
    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    index  index.html index.htm;
  }
 }
用map指令实现

在Nginx里面配置一个映射，$COOKIE_version可以解析出Cookie里面的version字段。$group是一个变量，{}里面是映射规则。

如果一个version为V1的用户来访问，$group就等于hilinux_01。在server里面使用就会代理到http://hilinux_01上。version为V2的用户来访问，$group就等于hilinux_02。在server里面使用就会代理到http://hilinux_02上。Cookie值都不匹配的情况下默认走hilinux_01所对应的服务器。

upstream hilinux_01 {
    server 192.168.1.100:8080 max_fails=1 fail_timeout=60;
}

upstream hilinux_02 {
    server 192.168.1.200:8080 max_fails=1 fail_timeout=60;
}

upstream default {
    server 192.168.1.100:8080 max_fails=1 fail_timeout=60;
}

map $COOKIE_version $group {
~*V1$ hilinux_01;
~*V2$ hilinux_02;
default default;
}

server {
  listen 80;
  server_name  www.hi-linux.com;
  access_log  logs/www.hi-linux.com.log  main;

  location / {
    proxy_pass http://$group;
    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    index  index.html index.htm;
  }
 }



Nginx根据来路IP实现灰度发布
############

如果是内部IP，则反向代理到hilinux_02(预发布环境)；如果不是则反向代理到hilinux_01(生产环境)。

upstream hilinux_01 {
    server 192.168.1.100:8080 max_fails=1 fail_timeout=60;
}

upstream hilinux_02 {
    server 192.168.1.200:8080 max_fails=1 fail_timeout=60;
}

upstream default {
    server 192.168.1.100:8080 max_fails=1 fail_timeout=60;
}

server {
  listen 80;
  server_name  www.hi-linux.com;
  access_log  logs/www.hi-linux.com.log  main;

  set $group default;
  if ($remote_addr ~ "211.118.119.11") {
      set $group hilinux_02;
  }

location / {
    proxy_pass http://$group;
    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    index  index.html index.htm;
  }
}
如果你只有单台服务器，可以根据不同的IP设置不同的网站根目录来达到相同的目的。

server {
  listen 80;
  server_name  www.hi-linux.com;
  access_log  logs/www.hi-linux.com.log  main;

  set $rootdir "/var/www/html";
    if ($remote_addr ~ "211.118.119.11") {
       set $rootdir "/var/www/test";
    }

    location / {
      root $rootdir;
    }
}



nginx 反向代理 负载均衡 动静分离 高可用
##################################
正向代理：代理客户端 VPN 等
反向代理：代理服务器 proxy_pass http://ip:port;
配置文件：
   全局:
   event
   http
       location:
           ~:  包含正则表达式 区分大小写
           ~*：包含正则表达式 不区分大小写
           =： 严格匹配

            location  = / {
              # 只匹配"/".
              [ configuration A ]
            }
            location  / {
              # 匹配任何请求，因为所有请求都是以"/"开始
              # 但是更长字符匹配或者正则表达式匹配会优先匹配
              [ configuration B ]
            }
            location ^~ /images/ {
              # 匹配任何以 /images/ 开始的请求，并停止匹配 其它location
              [ configuration C ]
            }
            location ~* .(gif|jpg|jpeg)$ {
              # 匹配以 gif, jpg, or jpeg结尾的请求.
              # 但是所有 /images/ 目录的请求将由 [Configuration C]处理.
              [ configuration D ]
            }

反向代理参数：
  https://www.php.cn/nginx/434074.html


负载均衡策略（负载均衡是特殊的反向代理）：
   轮询
   ip_hash( 在后端服务器不 down 下可以解决 session 问题)
   weight
   fair: 根据请求响应时间
   next upstream:
       osi 传输层：
          proxy_connect_timeout
          proxy_read_timeout
          proxy_send_timeout
       osi 表示层：
          proxy_connect_timeout
          proxy_ssl_verity on
动静分离：
  静态页面：
     expire 过期时间 当走浏览器缓存时 返回 304
     # uri: /xxx/  ; nginx_get_file_dir: /data/xxx/
     location /xxx/ {
         root /data/;
         index index.html index.htm;
         ## 列出文件
         autoindex on;
     }

nginx高可用：
  keepalived

nginx 原理：
   工作原理： master worker:
                支持热部署 ： 在工作的worker 可以继续工作，其他worker更新配置，待未更新的worker工作结束后更新配置
                高可用： 多个worker进程独立
                worker 数量设置： cpu cores
                worker_connections:
                   单个请求占用的 worker 连接数：2 个 或 4 个、 分静态或动态请求
                   nginx 最大并发数（最大请求数）：(num_worker * worker_connections) / 2 or 4
       client -----> master -----> 多个 worker  -----
         /|                                         |
          |                                         |
          |_________________________________________|



################################nginx 生态
nginx 原生 + 第三方C模块
nginx plus
TEngine(nginx + lua)
OpenResty(nginx + lua)
Kong(OpenResty + apiGateway)


################################nginx 性能架构
http 缓存机制
进程间通信机制



################################nginx 性能调优
worker_processes 进程的数量 CPU核的数量 另外不要忘了设置worker_cpu_affinity，这个配置用于将worker process与指定cpu核绑定，降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。 grep processor /proc/cpuinfo | wc -l这个命令会告诉你当前机器是多少核，输出为2即表示2核。
worker_connections 配置表示每个工作进程的并发连接数
Buffers: 如果buffer太小，Nginx会不停的写一些临时文件，这样会导致磁盘不停的去读写
  client_body_buffer_size:允许客户端请求的最大单个文件字节数
  client_header_buffer_size:用于设置客户端请求的Header头缓冲区大小，大部分情况1KB大小足够
  client_max_body_size:设置客户端能够上传的文件大小，默认为1m
  large_client_header_buffers:该指令用于设置客户端请求的Header头缓冲区大小

    具体可参考配置如下：
      client_body_buffer_size 10K;
      client_header_buffer_size 1k;
      client_max_body_size 8m;
      large_client_header_buffers 2 1k;

Timeouts:
  client_header_timeout client_body_timeout 设置请求头和请求体(各自)的超时时间，如果没有发送请求头和请求体，Nginx服务器会返回408错误或者request time out
  keepalive_timeout给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接，我们将它设置低些可以让Nginx持续工作的时间更长。
  send_timeout 指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，Nginx就会关闭连接。

  具体可参考配置如下：
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;

Gzip Compression:
  开启Gzip，gzip可以帮助Nginx减少大量的网络传输工作，另外要注意gzip_comp_level的设置，太高的话，Nginx服务会浪费CPU的执行周期。

    具体可参考配置如下：
      gzip             on;
      gzip_comp_level  2;
      gzip_min_length  1000;
      gzip_proxied     expired no-cache no-store private auth;
      gzip_types       text/plain application/x-javascript text/xml text/css application/xml;

Static File Caching:
    location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
      expires 365d;
 }

logging:
  access_log设置Nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快。 可以修改配置文件将该功能关闭：
  access_log off;

  sudo service nginx restart
